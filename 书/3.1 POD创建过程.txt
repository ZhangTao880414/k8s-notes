3.1.1 概述
理解 Kubernetes 中 Pod 的创建过程对于后续的运维和排障工作至关重要，当Pod未能按照预期启动或运行时，了解Pod创建流程有助于迅速定位问题环节。

例如，如果 Pod 始终未能调度到任何节点，可能是由于调度器策略设置不当、节点资源不足、或者是节点标签选择器匹配失败等问题。


若Pod已经调度但无法启动容器，可能是镜像拉取失败、容器运行时问题、资源配置错误等。


深入理解 Pod 创建过程不仅能帮助运维人员快速应对日常故障排查，还有助于优化资源分配、提升系统整体性能。

3.1.2 工作流程

第一步：kubectl create xxx
用户通过 kubectl 或 web 端向 apiserver发送创建 pod 请求。

第二步：Apiserver
Apiserver 会做出认证/鉴权响应，然后检查信息并把数据存储到ETCD里，创建 deployment 资源并初始化。


第三步：Controller  Manager
Controller-manager 通过 list-watch 机制，检查发现新到 deployment，将资源加入到内部工作队列，然后检查发现资源没有关联的 pod 和 replicas，启用deployment controller 创建 replicas 资源，再通过 replicas controller 创建 pod。创建完成后将 deployment，replicas，pod 资源更新存储到 etcd；


第四步：Scheduler
Scheduler 也是通过 list-watch 机制,监测发现新的 pod，并通过预选及优选策略算法，来计算出pod最终可调度的 node 节点，并通过 apiserver 将数据更新至 etcd；


第五步：Kubelet
Kubelet 每隔 20s (可以自定义) 向 apiserver 通过 NodeName 获取自身 Node 上所要运行的pod清单；通过与自己的内部缓存进行比较，如果有新的资源则触发钩子调 CNI  接口给 pod 创建 pod 网络，调用 CRI 接口去启动容器，调用 CSI 进行存储卷的挂载，然后启动 pod 容器；


第六步：Kube-proxy
Kube-proxy 为新创建的 pod 注册动态 DNS 到 CoreOS。给 pod 的 service 添加 iptables/ipvs 规则，用于服务发现和负载均衡。


3.1.3 总结
通过上述流程，Kubernetes 集群完成了从创建到运行 Pod 的全过程，确保了容器应用在集群内得以高效、可靠的部署和管理。


对这一过程的深入理解，有助于在遇到故障时快速定位问题，优化资源配置，并提升集群的整体稳定性和效率。