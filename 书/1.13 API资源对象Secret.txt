1.13.1 什么是Secret
在 K8s 中，Secret 是一种用于存储敏感信息的 API 资源对象。它类似于 ConfigMap，但用于存储密钥、密码、令牌等敏感数据，而不是一般的配置信息。
加密存储：与 ConfigMap 不同，Secret 中的数据是加密存储的，因此提供了一定程度的安全性，可以减少敏感数据泄露的风险。



与应用程序解耦：Secret 允许将敏感信息与应用程序分离，使得应用程序可以更加灵活地部署和管理，同时也降低了敏感信息泄露的风险。



支持多种类型：Secret 支持多种类型的敏感数据，包括 Opaque、ServiceAccountToken、Dockercfg、DockerConfigJson、BasicAuth、SSHAuth 等。每种类型都有不同的用途和数据结构。



与 Pod 的关联：Secret 可以与 Pod 共享，可以通过卷挂载或环境变量的方式将 Secret 中的数据注入到 Pod 中，从而使得 Pod 中的应用程序可以使用敏感信息。



与其他资源的整合：Secret 可以与其他 k8s 资源（如 Pod、Deployment、Service 等）整合使用，以实现安全的应用部署和通信。



权限管理：Secret 通常具有与访问控制相关的权限设置，例如指定哪些 Pod 可以访问哪些 Secret，以及 Secret 的访问权限等。



动态更新：与 ConfigMap 类似，Secret 也支持动态更新，在不重启 Pod 的情况下更新 Secret 中的数据，使得应用程序能够即时获取最新的敏感信息。


1.13.2 Secret YAML示例
Secret和cm的结构和用法很类似，不过在 K8s里Secret 对象又细分出很多类，

比如：



1）访问私有镜像仓库的认证信息
2）身份识别的凭证信息
3）HTTPS 通信的证书和私钥
4）一般的机密信息（格式由用户自行解释）
前几种我们现在暂时用不到，所以就只使用最后一种。


vi  mysecret.yaml  

apiVersion: v1
kind: Secret
metadata:
  name: mysecret

data:
  user: YW1pbmc=  ##使用命令echo -n "aming"|base64获取加密后的字符
  passwd: bGludXgxMjM=  ##使用命令echo -n "linux123"|base64获取加密后的字符


1.13.3 Secret创建和使用


创建secret
kubectl apply -f mysecret.yaml

查看secret
kubectl get secret
kubectl describe secret mysecret


创建测试Pod

vi testpod2.yaml

apiVersion: v1

kind: Pod

metadata:

  name: testpod2



spec:

  containers:

  - image: busybox

    name: busy

    imagePullPolicy: IfNotPresent

    command: ["/bin/sleep", "300"]



    env:

      - name: USERNAME

        valueFrom:

          secretKeyRef:  ##从mysecret这个secret里获取user的值

            name: mysecret

            key: user

      - name: PASSWORD

        valueFrom:

          secretKeyRef:  ##从mysecret这个secret里获取passwd的值

            name: mysecret

            key: passwd



验证：
kubectl exec -it testpod2 -- sh  ##进去后可以 echo $PASSWORD查看变量值